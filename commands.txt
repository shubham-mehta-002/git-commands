##  WHEN A REPO IS CREATED ON GITHUB AND WE MAKE A CLONE OF THAT IN OUR SYSTEM

-> first create a repo on github
-> open vs code terminal 
-> git clone [https link under code component on desired repo n github]
-> use cd to make the folder as current directory
-> git status :  to check if any no of file is changed or code in any of them is there
   	** 4 git status -> untracked(new file created) , modified(changed), staged(ready to commit),unmodified(unchanged)
	** unmodified / untracked  + add -> staged 
 	** staged + commit  -> unmodified
	
-> git add <file name>  :  add a particular file 
-> git add .  :  add all files that are either at untracked or modified stage at one
-> git commit -m [message] :  to commit and give the desired message along with it but changes wont be shown on the repo
-> git push origin [branch name ie main] : now finally all your changes will be shown on the repo 



## WHEN FOLDER CREATED IN DESKTOP IS UPLOADED TO GITHUB
-> git init  :  to intialize the folder as a git folder by adding a .git folder in the project
-> same as status,push,add,commit   **but these do changes only at local level and not in github , so we need our next commands for that
-> git remote add origin [https link of the repo]
-> git remote -v :  to check which remote repo we are talking about
-> git branch : to check which branch we are working on      // by default, master is the branhc but on github it is renamed as main so we rename this mater as man acc to industry standards
-> git branch -M main : to rename a branch
-> git push -u origin main : this -u means that in future also we are working on same project, so we dont need to write origin main in next push ie we use only git push in next git pushes



## BRANCHES IN GIT

-> git branch : to check branch 
-> git branch -M main : to rename branch
-> git checkout [branch name] : to navigate
-> git checkout -b [new branch name] : to create new branch
-> git branch -d [branch name] : to delete branch 	//we cant delete branch on which we are currently in , so we need to navigate to some other branch and then delete


## MERGE BRANCHES
   
Method-1: PULL REQUEST IN GITHUB
-> new when we do PR, then the data is updated on the remote and not on the local , so we need to create a pull request in that case
-> git pull origin main : used to fetch and download and update local repo

Method-2 : USING COMMAND LINE
-> git diff [branch name] : to compare commits,files , branches , ...
-> git merge [branch name other that current]  :  to merge 2 braches


## UNDOING CHANGES

case 1: STAGED CHANGES (added but not committed)
-> git reset [file name] : for a particular file
-> git reset : for all files

case 2: COMMITTED CHANGES(for one commit)
-> git reset HEAD~1 :  head means the last commit and ~1 means undo last commits by one
	**git log :  to see history of all commits and their hash codes
case 3: COMMITTED CHANGES(for many commit)
-> git reset [commit hash] : used to go back to a specified commit hash but not from vs code
-> git reser --hard [commit hash] : same as above + changes will be undine from vs code too




